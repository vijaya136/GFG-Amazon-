class Node:
    def __init__(self,data):
        self.data=data
        self.next=None
class singlelinkedlist:
    def __init__(self):
        self.head=None
    def traversal(self):
        if self.head is None:
            print("Empty////")
        else:
            x=self.head
            while x is not None:
                if x.next==None:
                    print(x.data)
                else:
                    print(x.data,end='-->')
                x=x.next
    def insert_begin(self,value):
        v=Node(value)
        v.next=self.head
        self.head=v
    def insert_end(self,value):
        v=Node(value)
        x=self.head
        while x is not None:
            if x.next==None:
                x.next=v
                v.next=None
            x=x.next
    def insert_position(self,value,pos):
        v=Node(value)
        x=self.head
        for i in range(1,pos-1):
            x=x.next
        #print(x.data)
        a=x.next
        #print(a.data)
        x.next=v
        v.next=a
    def delete_begin(self):
        x=self.head
        self.head=x.next
        x.next=None
    def delete_end(self):
        x=self.head
        while x is not None:
            if x.next.next==None:
                x.next=None
            x=x.next

    def delete_position(self,pos):
        x=self.head
        for i in range(1,pos-1):
            x=x.next
        a=x.next.next
        x.next=a


obj=singlelinkedlist()
n1=Node(22)
n2=Node(33)
n3=Node(44)
n4=Node(55)
obj.head=n1
n1.next=n2
n2.next=n3
n3.next=n4
obj.traversal()
obj.insert_begin(11)
obj.traversal()
obj.insert_end(66)
obj.traversal()
obj.insert_position(100,3)
obj.traversal()
obj.delete_begin()
obj.traversal()
obj.delete_end()
obj.traversal()
obj.delete_position(2)
obj.traversal()
